define(function(){

	var webSocket = null;

	/*//将消息显示在网页上
	function setMessageInnerHTML(innerHTML){
		document.getElementById('message').innerHTML += innerHTML + '<br/>';
	}

	//关闭连接
	function closeWebSocket(){
		websocket.close();
	}

	//发送消息
	function send(){
		var message = document.getElementById('text').value;
		websocket.send(message);
	}*/

	var refreshUnreadMessage = function(count){
		count=(count==0)?"":count;
		$('.sidebar-menu-item[data-menu=Common_Message] > span.sidebar-menu-msg').text(count);
		$('.sidebar-menu-container a[data-menu=Common] > span.sidebar-menu-msg').text(count);
		$('#btnTopMessage span.sidebar-menu-msg').text(count);
	}

	return {

		init : function(){

			if('WebSocket' in window){
				var url = $('base').attr('href').replace('http','ws') + 'wsServlet';
				webSocket = new WebSocket(url);

				//连接发生错误的回调方法
				webSocket.onerror = function(){
					//setMessageInnerHTML("error");
				};

				//连接成功建立的回调方法
				webSocket.onopen = function(event){
					//setMessageInnerHTML("open");
				}

				//接收到消息的回调方法
				webSocket.onmessage = function(event){
					var jsonData = JSON.parse(event.data);
					if (jsonData.message){
						if (jsonData.message.unRead != undefined){
							refreshUnreadMessage(jsonData.message.unRead);
						}
					}
				}

				//连接关闭的回调方法
				webSocket.onclose = function(){
					//setMessageInnerHTML("close");
				}

				//监听窗口关闭事件，当窗口关闭时，主动去关闭websocket连接，防止连接还没断开就关闭窗口，server端会抛异常。
				window.onbeforeunload = function(){
					webSocket.close();
				}
			}
			else{
				console.log('Not support websocket')
			}

		}

	};
})
